import React from "react";
import ReactDOM from "react-dom";

import './commentList'
import './commentForm'

class CommentBox extends React.Component {

    //The constructor() executes exactly once during the lifecycle of the component and sets up the initial state of the component.
    //Remember to call the super class (the class we're extending, React.Component) via super(props) before using the this keyword.
    constructor(props) {
        super(props);
        //this.state = { data: [] };

        // Server side rendering
        this.state = { data: this.props.initialData };

        // We need to pass data from the child component back up to its parent.
        // We do this in our parent's render method by passing a new callback (handleCommentSubmit) into the child, 
        // binding it to the child's onCommentSubmit event.Whenever the event is triggered, the callback will be invoked:
        this.handleCommentSubmit = this.handleCommentSubmit.bind(this);
    }

    /* componentWillMount() executes immediately and only once before the rendering occurs.
    componentWillMount() {
        const xhr = new XMLHttpRequest();
        xhr.open('get', this.props.url, true);
        xhr.onload = () => {
            const data = JSON.parse(xhr.responseText);
            this.setState({ data: data });
        };
        xhr.send();
    }*/

    handleCommentSubmit(comment) {
        const comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // use a more robust system for ID generation.
        comment.id = comments.length + 1;
        const newComments = comments.concat([comment]);
        this.setState({ data: newComments });

        const xhr = new XMLHttpRequest();
        xhr.open('post', this.props.submitUrl, true);
        xhr.setRequestHeader("Content-type", "application/json");
        xhr.onload = () => this.loadCommentsFromServer();
        xhr.send(JSON.stringify(comment));
    }

    loadCommentsFromServer() {
        const xhr = new XMLHttpRequest();
        xhr.open('get', this.props.url, true);
        xhr.onload = () => {
            const data = JSON.parse(xhr.responseText);
            this.setState({ data: data });
        };
        xhr.send();
    }

    // componentDidMount(), a method called automatically by React after a component is rendered for the first time.
    // By moving the XMLHttpRequest call from componentWillMount(), which is executed only once before rendering, 
    // to a function called loadCommentsFromServer().
    // we can then call it multiple times from componentDidMount() at a set interval to check for any updates to the comments.
    componentDidMount() {
        //this.loadCommentsFromServer();
        window.setInterval(
            () => this.loadCommentsFromServer(),
            this.props.pollInterval,
        );
    }

    render() {
        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <CommentList data={this.state.data} />
                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
            </div>
        );
    }
}

// ReactDOM.render(<CommentBox data={data} url="/comments" />, document.getElementById('content'));

// Commented out for server side rendering
/*ReactDOM.render(
    <CommentBox url="/comments" submitUrl="/comments/new" pollInterval="5000" />,
    document.getElementById('content')
);*/


/* 
 * Sources 
 * 
 * https://reactjs.net/tutorials/aspnetcore.html
 * https://sensibledev.com/reactjs-webpack-and-asp-net-core/
 * 
 * 
 */
